@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin ellipsis {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    position: $pos;
    display: $display;
}

@mixin btn($width, $height, $color, $bgColor, $fontSize) {
    width: $width;
    height: $height;
    border-radius: 10px;
    color: $color;
    background-color: $bgColor;
    font-size: $fontSize;
    text-align: center;
    line-height: $height;
}

@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}
// you have to set the style in all the separate formats. use it like below.
// input,  textarea {
//     @include input-placeholder {
//         color: $grey;
//     }
// }

@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// prefix
@mixin prefix($map, $vendors: webkit moz ms o) {
    @each $prop, $value in $map {
        @if $vendors {
            @each $vendor in $vendors {
                #{"-" + $vendor + "-" + $prop}: #{$value};
            }
        }

        // Dump regular property anyway
        #{$prop}: #{$value};
    }
}

// .element {
//   @include prefix((transform: translate(-50%, -50%)), webkit moz ms o);
// }

//To quickly centre a block element
//center2 with position
@mixin center($position, $option) {
    position: $position;

    @if $option== 'vertical' {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    } @else if $option== 'horizontal' {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    } @else if $option== 'both' {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

// Define vertical, horizontal, or both position at the center. use it like below.
// .foo {
//	 @include center(absolute,"both");
// }

//position style
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);

        @if $i and
            $i +
            1
            <=length($args) and
            type-of(nth($args, $i + 1))
            ==number
        {
            #{$o}: nth($args, $i + 1);
        }
    }

    position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}

//Easy and quick CSS positioning. use it like below.
// .menu li {
//   @include absolute(top 100% left 0);
// }

//gradient
@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation== 'vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation== 'horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    } @else {
        background: -webkit-radial-gradient(
            center,
            ellipse cover,
            $start-color,
            $end-color
        );
        background: radial-gradient(
            ellipse at center,
            $start-color,
            $end-color
        );
    }
}

//Quick gradients.  use it like below.
//$start-color, $end-color, $orientation - vertical/horizontal/radial
// .foo {
//    @include background-gradient(red, black, 'vertical');
//  }

//animation keyframes
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-ms-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

//Animation mixin setup. use it like below.

// Define animation name, and properties
// @include keyframes(fade-out) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }
// Add animation to element
// .element {
//   width: 100px;
//   height: 100px;
//   background: black;
//   @include animation('fade-out 5s 3');
// }
